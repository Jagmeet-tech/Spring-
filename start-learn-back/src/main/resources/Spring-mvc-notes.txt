Notes -3 :- (Part 2 is covered in jpa project and Part 1 covered in mvc project )

1. Use lambok to generate getter,setter, consturctor,toString with just annotation.
2. When we do bidrectional maaping in entities, then it will create two extra columns for maintaining that relationship. So in order to avoid that, use mappedBy attribute so that primary which is acting as foreign key in another table would be taken as advantage.
3. mappedBy is not used with @ManytoOne relationship.
    Reason :- mappedBy is used on the inverse side of the relationship, and it indicates which field in the other entity owns the relationship.
              Since @ManyToOne is the owning side and contains the foreign key, it does not use mappedBy. The mappedBy attribute is used only on the inverse side, which is typically the @OneToMany side.

4.  Non owning side -> (since it doesn't containing foreign key of another entity)
5.  Owning Side -> which containing foreign key of another entity.
6. Make repositories for database operations.
7. Make DTO's (Data Transfer objects) so that when controller call services then it should pass these DTO's to that service as DTO;'s will store incoming data from request.
8. Model Mapping is used to map entity to dto's and vice versa.
   Ex :- ModelMapper modelMapper = new ModelMapper();
         OrderDTO orderDTO = modelMapper.map(order, OrderDTO.class);

9. Between Controller and Services layer -> Dto objects will be exchanged for data.
10. Between Services and Database / DAO layer -> Enitity objects will be exchanged for data.
11. Use this standarad to create API end points :- /api/v1/courses
12. REST :-- stateless,client server communication usually HTTP.
          - Everything in rest api is considered as resource.
          - Each resource is identified by its URI.
          - Naming conventions :- Use nouns to represent resources not the verbs. (/users rather than /getUsers)
                                  Use plural names for resources (/users instead of /user)
                                  keep Url simple and intuitive.
          - Versioning :- Version your Api using the url. (/v1/users) or using headers
                          This helps in managing updates and maintaining backward compatibility.
          - Stateless :- Each Api call should contain all the information required the server needs to fullfill the request.
                         The server doesn't store any session information between request.

====================================================================================================================================================
Notes MVC :- 4

1. PageRequest.of(pageNumber, pageSize) :-
       -  PageRequest is a class provided by Spring Data JPA that implements the Pageable interface. It is used to request a specific page of data from the database with a defined page size.
       -  pageNumber: This is the page number (starting from 0) you want to fetch. If pageNumber = 0, it refers to the first page, pageNumber = 1 refers to the second page, and so on.
       -  pageSize: This is the number of records you want to display on each page. For example, if pageSize = 10, only 10 Category records will be fetched per page.

       - findAll(pageRequest) is a method in JpaRepository that allows you to retrieve data with pagination. By passing the pageRequest, Spring Data JPA understands that you want a specific page of results (determined by pageNumber and pageSize).
         findAll(pageRequest) -> This method returns a Page<Category> object, which contains:
             a. The content of the page (the actual list of Category entities for the requested page).
             b. Metadata about the pagination (total number of pages, total number of records, current page number, isLast,etc.).
       - The getContent() method retrieves the actual data from the Page object. In this case, it returns a List<Category> containing the Category entities for the current page.

2. Sorting:
      - For achieving sorting based on specific data member, we have a class called Sort which could be passed in PageRequest.of(pageNumber, pageSize,sort) function to receive page object based on our sorting criteria.
      - The Sort.by("fields") static method is used to create a sorting object in Spring Data JPA.
      - sort.ascending() / sort.descending() to sort the data.

(By combining both, you can efficiently retrieve a specific page of data that is also sorted by a particular field.)

3. Bean Validation is a powerful validation framework in spring that helps ensure the integrity of your data by applying constraints to your model / DTO classes.
4. It can be used in standalone Java applications or integrated into frameworks like Spring. With annotations like @NotEmpty(), @NotNull, @Size, @Email, etc., you can enforce validation rules on fields, and the validation process can be triggered programmatically or automatically by frameworks like Spring Boot.
5. We need to include dependency for this bean validation library :- "spring-boot-starter-validation"
6. We can use annotations to validate the DTO classes data members which are holding data from client request in order to validate the request parameters.
7. @Valid annotation should be used to validate DTO object wherever calling / using.
    Example in controller:-  @PostMapping
                             public ResponseEntity<CategoryDto> create(@Valid @RequestBody CategoryDto categoryDto){...}
    Purpose of @Valid:-
    - Trigger Validation: When you annotate a method parameter, typically an object (like a DTO or a model class), with @Valid, it triggers the validation process for that object based on the constraints defined on its fields (e.g., @NotNull, @Size, @Email, etc.).
    - Automatic Validation: It integrates with the Bean Validation API (JSR 303/JSR 380), so you donâ€™t have to manually validate objects. Spring will automatically trigger validation for you when @Valid is used.

    Common Use Cases of @Valid:
    - It is often used in controller methods where you need to validate a request body or request parameters.
    - When you receive a DTO (Data Transfer Object) or a form object in a request, annotating it with @Valid ensures that the data is validated before the controller method proceeds.
    - In Spring Boot applications, @Valid is used with request bodies in REST APIs, ensuring that the incoming data (usually from a JSON payload) meets the required validation constraints.
    - Validation errors are automatically handled by Spring, or you can catch / customize error handling with @ExceptionHandler or @ControllerAdvice.

8. "?" is used in case we don;t able to decide which data type to return. Ex:- public ResponseEntity<?> create(@Valid @RequestBody CategoryDto categoryDto, BindingResult result){...}
9. BindingResult is used to capture validation errors in the controllers so that we can return response according based on that.
10. But it is not good practice to capture each validation result in BindingResult and check in controller itself that whether it hasErrors() or not. Because then we need to do for each controller methods. We need a way to handle it at one place where it could be applied for all controllers. And we know that place is "GlobalExceptionHandler" class.
11. "GlobalExceptionHandler" class could be used to capture / catch validation exception (MethodArgumentNotValidException) and return suitable error response.
     Ex :-     @ExceptionHandler(MethodArgumentNotValidException.class)
               public ResponseEntity<Map<String,String>> handleValidationError(MethodArgumentNotValidException ex){
                   Map<String,String> errorMap = new HashMap<>();
                   ex.getBindingResult().getAllErrors().forEach(objectError -> {
                       String fieldName = ((FieldError)objectError).getField();
                       String errorMessage = objectError.getDefaultMessage();

                       errorMap.put(fieldName,errorMessage);
                   });

                   return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorMap);
               }
12. FieldError: Represents errors related to a specific field of an object in spring validation framework.
13. GlobalError (or ObjectError): Represents errors related to the entire object in spring validation framework.

=================================================================================================================================================================================================================

Notes MVC :- 5

1. findAll(Pageable pageable) :- this method signature takes Pageable as argument. But earlier we have passed here PageRequest (previous class)  as PageRequest is subclass of Pageable . SO we can pass either of that as argument in findAll() function.
2. Without need to create seperate Dto for CustomPageResponse (which we created in previous class), we can use existing PageImpl<> class as well for response.
3. PageImpl :-
   - When using Spring Data JPA, the PageImpl class is used implicitly when you return a Page<T> from a repository method. Here is an example where pagination is applied using a repository.
   - PageImpl is a concrete implementation of the Page interface in Spring Data, used to represent a page of data in a paginated query result.
   - It contains the data for the current page, pagination metadata like the total number of elements, the current page, and the page size.
   - It's most commonly used in Spring Data repositories when performing paginated queries.
   - It provides useful methods like getContent(), getTotalPages(), and hasNext() to easily work with paginated data.

4. Passing a Pageable object in a GET method of a controller in Spring allows you to implement pagination for API endpoints easily. Spring automatically binds query parameters like page, size, and sort to the Pageable object, which can then be passed to the service layer to fetch a paginated result. This improves performance, enhances user experience, and simplifies the code.
5. Creating Nested Resource API :-
    - Creating a nested resource API means designing an API where resources are related to each other, and one resource exists as part of another resource. For instance, consider a scenario where you have two resources: Course and Student. A Course can have multiple Students, so Students can be viewed as a nested resource under a specific Course.
    - When designing an API with nested resources, you typically create endpoints that allow operations on the related resources. These endpoints are structured to reflect the relationships between the resources.
    - Ex :- categories/{categoryId}/courses/{courseId}   -> Meaning particular catgeoryId ke andar jo courses hai usmein specific courseId get/update krdo.  (nested as we are accessing nested resource)
    - Depending on bidirectional / unidirectional mapping and relationships, we can write nested resource api like which entities would able to expose which nested entity.
    - Since we are handling bidirectional mapping , so when we are adding course inside a "category" entity,  then we need to take care of adding catgeory to that "course" entity as well. (so that we fetch related entities info. through whichever entity we have).
    - CascadeType.ALL is a convenient way to automatically propagate all CRUD operations (persist, merge, remove, etc.) from a parent entity to its associated child entities.
    - CascadeType.ALL simplifies code and ensures data consistency, be mindful of the potential for unintended data loss or performance problems, especially when deleting or persisting large object graphs. Use it carefully based on the specific requirements of your application.
    - The error message "could not initialize proxy - no session" is a common issue encountered in Hibernate or JPA applications. It typically occurs when you're trying to access a lazy-loaded relationship outside of a valid Hibernate session (e.g., after the session is closed or when there is no active transaction).
      Understanding the issue:- (by default lazy load of entity)
            i. In Hibernate, entities with lazy loading are not fully loaded from the database when the parent entity is fetched. Instead, they are proxied. This means that the related entities (for example, collections or single associations) are not retrieved immediately but are only fetched when they are accessed for the first time (on-demand), a behavior known as lazy loading.
               However, the proxy can only be initialized if there is an active session that can fetch the actual data from the database. If the session is closed or if you're outside the transaction context, Hibernate cannot initialize the proxy, leading to the "could not initialize proxy - no session" error.
            ii. Common Scenarios for This Error:
                Lazy Loading After Session is Closed: You may have fetched an entity within a session (like inside a service method), but then try to access its lazy-loaded properties after the session has been closed.
                Ex:- @Transactional
                     public void exampleMethod() {
                         Course course = courseRepository.findById(1L).orElseThrow();
                         // Some other code...
                     }
                     // After the session has been closed, trying to access course.getStudents() will result in the error.
            iii. Solution :-  a.)Eager Fetching: You can fetch the related entities eagerly instead of lazily. This forces Hibernate to load the related entities immediately, so you don't face the issue when accessing them later.
                                 In your entity, change the relationship from lazy loading (FetchType.LAZY) to eager loading (FetchType.EAGER).
                                 Ex :- @OneToMany(mappedBy = "course", fetch = FetchType.EAGER)
                                       private List<Student> students;
                              b.) Use @Transactional:- Ensure that the code where you access the lazy-loaded entities is wrapped in a transaction. In Spring, the @Transactional annotation ensures that the session is open and active during the method execution. (try to maintain db session active)
                                 Ex:- @Transactional
                                      public void exampleMethod() {
                                          Course course = courseRepository.findById(1L).orElseThrow();
                                          List<Student> students = course.getStudents();  // Will work as session is still open
                                      }

      - In Dto's of related entites, always show another entity in one dto only to avoid infinite fetch of enities. (ex:- Course ke andar category and category ke andar course, as it will cause infinite circle of fetching entities.)

=================================================================================================================================================================================
Notes MVC :- 6

1. Image upload :-
      - file (img,video,audio,pdf) fetch in server
      - file information (meta data) can get.
      - actual file content read (InputStream class to read data of a file.)
      - save -> folder / db / AWS / cloudinary
      - meta data save (khud ke db mein , not the actual file)
      - MultipartFile allows you to handle file uploads in web applications, where users can send files (such as images, documents, etc.) to the server as part of a web form. You can receive as @ReuestParam annotation in controller.
              a. It provides methods to read and access the content of the uploaded file, such as its original name, size, content type, and the actual file data.
              b. After receiving the file as a MultipartFile, you can process it and store it on your file system, in a database, or in cloud storage.
      - Path represents a file or directory location and provides various methods to manipulate and interact with file system paths.
      - Paths is a utility class that provides methods to create instances of Path
      - Together, these classes offer a more modern, flexible, and efficient way of handling file system paths compared to the older File class in Java.
      - They are especially useful in modern Java applications for tasks like file manipulation, file system interaction, and reading/writing files efficiently.

      - To return image as response , consider return type ResponseEntity<Resource>.
      - The Resource interface is a key abstraction in Spring for accessing different types of resources (file system, classpath, URL, etc.). It provides a common set of methods for checking existence, reading content, and handling resources, making it easier to work with various types of resources in a consistent way.
      - Common implementations of the Resource interface include ClassPathResource, FileSystemResource, UrlResource, InputStreamResource, and others.
      - # Maximum file size for uploads (e.g., 10 MB)
        spring.servlet.multipart.max-file-size=10MB

      - # Maximum request size (total size including file data and other form data)
        spring.servlet.multipart.max-request-size=10MB

      - You can also create custom annotation for validation of image:-
            a. Create Custom Annotation: Define a custom annotation (@ValidImage) using @Constraint and link it to a validator class.
                                         Ex :- @Constraint(validatedBy = ImageValidator.class)
                                               @Target({ FIELD, METHOD, PARAMETER, ANNOTATION_TYPE })
                                               @Retention(RUNTIME)
                                               public @interface ValidImage {
                                                   String message() default "Invalid image file";
                                                   Class<?>[] groups() default {};
                                                   Class<? extends Payload>[] payload() default {};
                                               }
            b. Create Validator Class:- Implement the validation logic in a class (ImageValidator) that checks if the uploaded file is an image (e.g., based on file extension or MIME type).
                                        Ex :- public class ImageValidator implements ConstraintValidator<ValidImage, MultipartFile> {
                                                  @Override
                                                  public boolean isValid(MultipartFile file, ConstraintValidatorContext context) {
                                                      // Check file type or extension
                                                      return file.getOriginalFilename().matches(".*\\.(jpg|jpeg|png|gif|bmp)$");
                                                  }
                                              }
            c. Apply Annotation in Model:- Use the @ValidImage annotation on fields (like MultipartFile) in your DTO or model class to trigger validation.
                                         Ex:- public class FileUploadDto {
                                                  @ValidImage(message = "Please upload a valid image file.")
                                                  private MultipartFile file;
                                              }
            d. Controller Validation:- In your controller, use @Valid to trigger validation and BindingResult to capture validation errors.
                                         Ex:- @PostMapping("/upload")
                                              public String uploadImage(@Valid @RequestBody FileUploadDto fileUploadDto, BindingResult bindingResult) {
                                                  if (bindingResult.hasErrors()) {
                                                      return bindingResult.getAllErrors().get(0).getDefaultMessage();
                                                  }
                                                  // Further processing
                                                  return "File uploaded successfully!";
                                              }

            e. Handle Errors:- Customize error messages and handle the validation result accordingly in the controller.
            (This approach provides a clean, reusable way to validate image files in your Spring application.)

2. You can get request object information thorugh HttpServletRequest class injecting in controller parameter.
3. HttpServletRequest is an interface provided by the Servlet API in Java, and it is commonly used in web applications (like Spring-based applications) to represent an HTTP request made by a client (such as a web browser). It provides various methods for interacting with the incoming request data, including headers, parameters, session, and more.
     - Access HTTP request parameters, headers, and body content.
     - Work with client data such as IP address and cookies.
     - Handle session management.
     - Process multipart file uploads and more.
   (In Spring MVC, HttpServletRequest is automatically injected into controller methods, allowing easy access to the request information.)

4. Similarly we have HttpServletResponse methods of J2EE.
5. @RequestHeader is used to bind request header values to method parameters in a Spring controller.ou can specify a header name as a parameter to extract its value.
6. @CrossOrigin is an annotation in Spring that is used to enable Cross-Origin Resource Sharing (CORS) for a controller or specific handler method. CORS is a mechanism that allows a web application running at one origin (domain) to make requests for resources hosted on another origin (domain). It is particularly useful when you have a frontend and backend that are served from different origins, such as a frontend on http://localhost:3000 and a backend API on http://localhost:8080.
   By using @CrossOrigin, you allow your Spring-based application to respond to HTTP requests made from different origins, domains, or ports. This is important for enabling the interaction between web applications and APIs across different servers.
   Ex :- @RestController
         @CrossOrigin(origins = "http://localhost:3000")  // Allow requests from this origin
         public class MyController {

             @GetMapping("/api/data")
             public String getData() {
                 return "This is data from the backend.";
             }
         }

   Ex :- @RestController
         public class MyController {

             @CrossOrigin(origins = "http://localhost:3000")
             @GetMapping("/api/specific-data")
             public String getSpecificData() {
                 return "This data is available for a specific method.";
             }
         }

7. @ResponseStatus annotation is a useful tool in Spring to automatically set HTTP status codes for responses.
8. In Spring (and more broadly, with Jackson, which is used by default for JSON serialization/deserialization in Spring), @JsonProperty and @JsonIgnore are annotations that control how Java objects are serialized into JSON and deserialized back into Java objects.
  - The @JsonProperty annotation is used to specify how a Java object property should be represented in JSON. This annotation allows you to define the name of the JSON property that should be mapped to a particular Java field, and it can also help with deserialization and serialization customization.
          a. Rename a Java field during serialization/deserialization.
          b. Indicate that a field should be included in the JSON output (even if it might be excluded by default).
          c. Control the ordering of JSON properties.
             Ex :- import com.fasterxml.jackson.annotation.JsonProperty;

                   public class User {

                       @JsonProperty("username")  // Renames the Java field to "username" in the JSON
                       private String name;

                       @JsonProperty("email_address")  // Renames the Java field to "email_address" in the JSON
                       private String email;

                       // Getters and setters
                   }

  - The @JsonIgnore annotation is used to exclude a property from being included in the JSON serialization (i.e., the field will be ignored when converting the Java object to JSON) and from being deserialized back into the Java object (i.e., the field is ignored when parsing the JSON back into the Java object).
         a. To exclude sensitive data (e.g., password fields) from being exposed in the JSON response.
         b. To avoid serializing fields that are not necessary to include in the response.
         c. To prevent circular references between objects.

         Ex:-  import com.fasterxml.jackson.annotation.JsonIgnore;

               public class User {

                   private String name;

                   @JsonIgnore  // This field will be ignored during serialization and deserialization
                   private String password;

                   // Getters and setters
               }

9. The @JsonFormat annotation in Jackson (the default JSON library in Spring) is used to customize the serialization and deserialization of date/time values. It allows you to control the format of dates, times, numbers, and other types during the process of converting a Java object to JSON or vice versa.
     a. Formatting date/time values: You can specify how dates and times should appear in the serialized JSON (e.g., changing the default ISO format to a custom date format).
     b. Formatting numeric values: You can define how numeric values should be formatted.
     c. Controlling the time zone: You can specify a specific time zone when formatting dates or times.
     Ex:- @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
          private LocalDate dateOfBirth;

10. Use this @Json annotations mentioned above in  DTO / model classes only .(Don't use it in entity classes. )



